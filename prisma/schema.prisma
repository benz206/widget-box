// Prisma schema for widget-box
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    passwordHash  String?

    accounts Account[]
    sessions Session[]

    // widgets owned by the user
    userWidgets UserWidget[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Base widget catalog entry - describes a widget provider/type and default config
model Widget {
    id           String  @id @default(cuid())
    // canonical identifier like "weather.simple" or "stocks.ticker"
    slug         String  @unique
    name         String
    description  String?
    provider     String // organization or source (e.g., "system", "community")
    creator      String? // display attribution/name
    // sizing model: small (1x1), medium (2x2), large (3x2)
    size         String
    // default width and height in grid cells
    defaultWidth Int     @default(1)
    defaultHeight Int    @default(1)
    // optional JSON schema for config options
    configSchema Json?
    // optional script or URL pointer for custom layout sizing logic
    sizingScript String?

    // default data refresh interval in seconds
    refreshIntervalSeconds Int @default(300)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userWidgets UserWidget[]
}

// A user's placed widget instance on the playground/dashboard
model UserWidget {
    id                     String    @id @default(cuid())
    userId                 String
    widgetId               String
    // position on 5x5 grid (0-4 for x, 0-4 for y)
    x                      Int       @default(0)
    y                      Int       @default(0)
    // size in grid cells (1-5 for width, 1-5 for height)
    w                      Int       @default(1)
    h                      Int       @default(1)
    // per-user configuration as JSON
    config                 Json?
    // last fetched data snapshot
    data                   Json?
    // timestamp indicating when data was last refreshed
    dataUpdatedAt          DateTime?
    // per-instance refresh interval override
    refreshIntervalSeconds Int?
    // z-index for layering (higher = on top)
    zIndex                 Int       @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    widget Widget @relation(fields: [widgetId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([widgetId])
    @@unique([userId, x, y]) // Prevent overlapping widgets
}
